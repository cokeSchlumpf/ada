akka {

  persistence.journal.plugin = "akka.persistence.journal.leveldb"
  persistence.journal.leveldb.dir = "journal"

  # options: OFF, ERROR, WARNING, INFO, DEBUG
  loglevel = "INFO"

  actor {
    provider = "cluster"

    serializers {
      dvc = "ada.domain.dvc.protocol.serializers.DataVersionControlSerializer"
      namespace = "ada.domain.dvc.protocol.serializers.NamespaceMessageSerializer"
      repository = "ada.domain.dvc.protocol.serializers.RepositoryMessageSerializer"
      resource-registry = "ada.domain.dvc.services.registry.ResourceRegistrySerializer"
      values = "ada.domain.dvc.values.ValuesSerializer"
    }

    serialization-bindings {
      "ada.commons.util.FQResourceName" = values
      "ada.commons.util.ResourcePath" = values

      "ada.domain.dvc.protocol.api.DataVersionControlEvent" = dvc
      "ada.domain.dvc.protocol.api.NamespaceEvent" = namespace
      "ada.domain.dvc.protocol.api.NamespaceMessage" = namespace
      "ada.domain.dvc.protocol.api.ValueObject" = values
      "ada.domain.dvc.protocol.api.RepositoryEvent" = repository
      "ada.domain.dvc.protocol.api.RepositoryMessage" = repository

      "ada.domain.dvc.services.registry.ResourceRegistryCommand" = resource-registry
      "ada.domain.dvc.services.registry.ResourceRegistryEvent" = resource-registry
    }
  }

  cluster {
    downing-provider-class = "tanukki.akka.cluster.autodown.QuorumLeaderAutoDowning"

    seed-nodes = []
    seed-nodes = ${?SEED_NODES}
    shutdown-after-unsuccessful-join-seed-nodes = 120s
  }

  coordinated-shutdown.terminate-actor-system = on

  remote {
    log-remote-lifecycle-events = on
    netty.tcp {
      hostname = "127.0.0.1"
      hostname = ${?HOSTNAME}
      bind-hostname = 0.0.0.0
      port = 2551
      port = ${?PORT}
    }
  }

  discovery {
    method = kubernetes-api
    method = ${?DISCOVERY_METHOD}
    kubernetes-api {
      pod-namespace = "default" // in which namespace cluster is running
      pod-namespace = ${?K8S_NAMESPACE}
      pod-label-selector = "app=ada-vcs"
      pod-label-selector = ${?K8S_SELECTOR}
      pod-port-name = "management" // name of cluster management port
      pod-port-name = ${?K8S_MANAGEMENT_PORT}
    }
  }

  management {
    http {
      hostname = "127.0.0.1"
      hostname = ${?HOSTNAME}
      bind-hostname = "0.0.0.0"
      port = 8558
      bind-port = 8558
    }
    cluster.bootstrap {
      contact-point-discovery {
        required-contact-point-nr = 2
        required-contact-point-nr = ${?REQUIRED_CONTACT_POINTS}
      }
    }
  }

  remote {
    log-remote-lifecycle-events = on
    netty.tcp {
      hostname = "127.0.0.1"
      hostname = ${?HOSTNAME}
      port = 2551
      port = ${?PORT}
      bind-hostname = 0.0.0.0
      bind-port = 2551
    }
  }

}

akka.management {
  cluster.bootstrap {
    contact-point-discovery {
      # For the kubernetes API this value is substributed into the %s in pod-label-selector
      service-name = "ada-vcs"

      # pick the discovery method you'd like to use:
      discovery-method = kubernetes-api
    }
  }
}

custom-downing {
  stable-after = 20s

  quorum-leader-auto-downing {
    role = ""
    quorum-size = 2
    down-if-out-of-quorum = true
  }
}
