akka.cluster {
    downing-provider-class = "tanukki.akka.cluster.autodown.QuorumLeaderAutoDowning"

    seed-nodes = []
    seed-nodes = ${?SEED_NODES}
    shutdown-after-unsuccessful-join-seed-nodes = 120s
}

akka.coordinated-shutdown.terminate-actor-system = on

akka.remote {
  log-remote-lifecycle-events = on
  netty.tcp {
    hostname = "127.0.0.1"
    hostname = ${?HOSTNAME}
    port = 2551
    port = ${?PORT}
    bind-hostname = 0.0.0.0
    bind-port = 2551
  }
}

akka.discovery {
  method = kubernetes-api
  method = ${?DISCOVERY_METHOD}
  kubernetes-api {
    pod-namespace = "default" // in which namespace cluster is running
    pod-namespace = ${?K8S_NAMESPACE}
    pod-label-selector = "app=ada-vcs"
    pod-label-selector = ${?K8S_SELECTOR}
    pod-port-name = "management" // name of cluster management port
    pod-port-name = ${?K8S_MANAGEMENT_PORT}
  }
}

akka.management {
  http {
    hostname = "127.0.0.1"
    hostname = ${?HOSTNAME}
    bind-hostname = "0.0.0.0"
    port = 8558
    bind-port = 8558
  }
  cluster.bootstrap {
    contact-point-discovery {
      required-contact-point-nr = 2
      required-contact-point-nr = ${?REQUIRED_CONTACT_POINTS}

      # For the kubernetes API this value is substributed into the %s in pod-label-selector
      service-name = "ada-vcs"

      # pick the discovery method you'd like to use:
      discovery-method = kubernetes-api
    }
  }
}

custom-downing {
  stable-after = 20s

  quorum-leader-auto-downing {
    role = ""
    quorum-size = 2
    down-if-out-of-quorum = true
  }
}
